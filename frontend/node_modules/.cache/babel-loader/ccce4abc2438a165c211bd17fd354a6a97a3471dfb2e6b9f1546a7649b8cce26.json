{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/footballgame/frontend/src/components/FootballGame/FootballGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { gameService } from '../../services/api';\nimport './FootballGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FootballGame = () => {\n  _s();\n  var _gameState$currentPla;\n  const [gameState, setGameState] = useState({\n    currentPlayer: null,\n    choices: [],\n    playersLeft: 42,\n    loading: true,\n    error: null,\n    gameOver: false\n  });\n\n  // Keep track of all selected choices throughout the game\n  const [globalSelectedChoices, setGlobalSelectedChoices] = useState(new Set());\n  // Keep track of correct/incorrect choices\n  const [choiceResults, setChoiceResults] = useState({});\n\n  // Add new state for modal\n  const [showScoreModal, setShowScoreModal] = useState(false);\n  const [finalScore, setFinalScore] = useState(0);\n\n  // Add new state for tracking API calls\n  const [isProcessing, setIsProcessing] = useState(false);\n  useEffect(() => {\n    // Reset game on component mount (page refresh)\n    const resetAndStartGame = async () => {\n      try {\n        await gameService.resetGame();\n        setGlobalSelectedChoices(new Set());\n        setChoiceResults({});\n        setShowScoreModal(false);\n        setFinalScore(0);\n        setIsProcessing(false);\n        setGameState({\n          currentPlayer: null,\n          choices: [],\n          playersLeft: 42,\n          loading: true,\n          error: null,\n          gameOver: false\n        });\n        // fetchPlayerData();\n      } catch (error) {\n        console.error('Error resetting game:', error);\n        setGameState(prev => ({\n          ...prev,\n          error: 'Failed to reset game',\n          loading: false\n        }));\n      }\n    };\n    resetAndStartGame();\n  }, []); // Empty dependency array means this runs once on mount\n\n  useEffect(() => {\n    fetchPlayerData();\n  }, []);\n  const fetchPlayerData = async () => {\n    try {\n      const data = await gameService.getPlayer();\n      if (!data.player) {\n        setGameState(prev => ({\n          ...prev,\n          gameOver: true,\n          loading: false\n        }));\n        return;\n      }\n      setGameState(prev => ({\n        ...prev,\n        currentPlayer: data.player,\n        choices: data.choices,\n        playersLeft: data.playersLeft,\n        loading: false\n      }));\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        setGameState(prev => ({\n          ...prev,\n          gameOver: true,\n          loading: false\n        }));\n      } else {\n        setGameState(prev => ({\n          ...prev,\n          error: 'Failed to load player data',\n          loading: false\n        }));\n      }\n    }\n  };\n  const handleGameEnd = async () => {\n    // Calculate score before resetting states\n    const correctAnswers = Object.values(choiceResults).filter(Boolean).length;\n    const totalAnswers = Object.keys(choiceResults).length;\n    setFinalScore(correctAnswers);\n    setShowScoreModal(true);\n    try {\n      await gameService.resetGame();\n      // Don't reset states until modal is closed\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error resetting game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to reset game'\n      }));\n    }\n  };\n  const handleCloseModal = async () => {\n    // Reset states when modal is closed\n    setShowScoreModal(false);\n    setGlobalSelectedChoices(new Set());\n    setChoiceResults({});\n    setIsProcessing(false);\n    setFinalScore(0);\n\n    // Fetch first player of new game\n    try {\n      setGameState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      const data = await gameService.getPlayer();\n      setGameState({\n        currentPlayer: data.player,\n        choices: data.choices,\n        playersLeft: data.playersLeft,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to start new game',\n        loading: false\n      }));\n    }\n  };\n  const handleChoice = async choiceId => {\n    if (isProcessing || globalSelectedChoices.has(choiceId)) return;\n    try {\n      setIsProcessing(true);\n      const response = await gameService.validateAnswer(gameState.currentPlayer.id, choiceId);\n\n      // Update global selected choices and results only after successful validation\n      setGlobalSelectedChoices(prev => new Set([...prev, choiceId]));\n      setChoiceResults(prev => ({\n        ...prev,\n        [choiceId]: response.isCorrect\n      }));\n\n      // Check if all options are selected\n      const updatedSelectedOptions = [...globalSelectedChoices, choiceId];\n      if (updatedSelectedOptions.length === gameState.choices.length) {\n        handleGameEnd();\n        return;\n      }\n\n      // Move to next player after a short delay\n      setTimeout(async () => {\n        try {\n          const data = await gameService.getPlayer();\n          if (!data.player) {\n            handleGameEnd();\n          } else {\n            setGameState(prev => ({\n              ...prev,\n              currentPlayer: data.player,\n              choices: data.choices,\n              playersLeft: data.playersLeft,\n              loading: false\n            }));\n          }\n        } catch (error) {\n          console.error('Error fetching next player:', error);\n          setGameState(prev => ({\n            ...prev,\n            error: 'Failed to load next player',\n            loading: false\n          }));\n        } finally {\n          setIsProcessing(false);\n        }\n      }, 1500); // Increased delay to 1.5 seconds\n    } catch (error) {\n      var _error$response2;\n      console.error('Error validating choice:', error);\n      // Check if it's a rate limit error\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n        // Show some user feedback about rate limiting\n        setGameState(prev => ({\n          ...prev,\n          error: 'Please wait before selecting another option'\n        }));\n        setTimeout(() => {\n          setGameState(prev => ({\n            ...prev,\n            error: null\n          }));\n        }, 2000);\n      }\n      setIsProcessing(false);\n    }\n  };\n  const handleNextPlayer = () => {\n    if (gameState.playersLeft <= 1) {\n      setGameState(prev => ({\n        ...prev,\n        gameOver: true\n      }));\n      return;\n    }\n    setGameState(prev => ({\n      ...prev,\n      loading: true\n    }));\n    fetchPlayerData();\n  };\n  const handleSkip = () => {\n    handleNextPlayer();\n  };\n  const handleRestart = async () => {\n    try {\n      await gameService.resetGame();\n      setGlobalSelectedChoices(new Set());\n      setChoiceResults({});\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: true,\n        error: null,\n        gameOver: false\n      });\n      fetchPlayerData();\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n  const calculateFinalScore = () => {\n    // Calculate score based on correct answers\n    return Object.values(choiceResults).filter(Boolean).length;\n  };\n  if (gameState.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameState.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: gameState.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameState.gameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You've seen all players!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        className: \"restart-btn\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"football-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-name\",\n          children: (_gameState$currentPla = gameState.currentPlayer) === null || _gameState$currentPla === void 0 ? void 0 : _gameState$currentPla.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"skip-btn\",\n          onClick: handleSkip,\n          children: \"SKIP \\u25B6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-left\",\n          children: [gameState.playersLeft, \" PLAYERS LEFT\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choices-grid\",\n      children: gameState.choices.map(choice => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `choice-card ${globalSelectedChoices.has(choice.id) ? choiceResults[choice.id] ? 'correct selected' : 'incorrect selected' : ''} ${isProcessing ? 'disabled' : ''}`,\n        onClick: () => handleChoice(choice.id),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"choice-icon\",\n          children: choice.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"choice-label\",\n          children: choice.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, choice.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), showScoreModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game Complete!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Correct Answers: \", finalScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Questions: \", Object.keys(choiceResults).length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Accuracy: \", (finalScore / Object.keys(choiceResults).length * 100).toFixed(1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(FootballGame, \"CyPuUYvqryTKOCU6uEuVk+t6Fy4=\");\n_c = FootballGame;\nexport default FootballGame;\nvar _c;\n$RefreshReg$(_c, \"FootballGame\");","map":{"version":3,"names":["React","useState","useEffect","gameService","jsxDEV","_jsxDEV","FootballGame","_s","_gameState$currentPla","gameState","setGameState","currentPlayer","choices","playersLeft","loading","error","gameOver","globalSelectedChoices","setGlobalSelectedChoices","Set","choiceResults","setChoiceResults","showScoreModal","setShowScoreModal","finalScore","setFinalScore","isProcessing","setIsProcessing","resetAndStartGame","resetGame","console","prev","fetchPlayerData","data","getPlayer","player","_error$response","response","status","handleGameEnd","correctAnswers","Object","values","filter","Boolean","length","totalAnswers","keys","handleCloseModal","handleChoice","choiceId","has","validateAnswer","id","isCorrect","updatedSelectedOptions","setTimeout","_error$response2","handleNextPlayer","handleSkip","handleRestart","calculateFinalScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","map","choice","icon","label","toFixed","_c","$RefreshReg$"],"sources":["/home/user/Desktop/footballgame/frontend/src/components/FootballGame/FootballGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { gameService } from '../../services/api';\nimport './FootballGame.css';\n\nconst FootballGame = () => {\n  const [gameState, setGameState] = useState({\n    currentPlayer: null,\n    choices: [],\n    playersLeft: 42,\n    loading: true,\n    error: null,\n    gameOver: false\n  });\n\n  // Keep track of all selected choices throughout the game\n  const [globalSelectedChoices, setGlobalSelectedChoices] = useState(new Set());\n  // Keep track of correct/incorrect choices\n  const [choiceResults, setChoiceResults] = useState({});\n\n  // Add new state for modal\n  const [showScoreModal, setShowScoreModal] = useState(false);\n  const [finalScore, setFinalScore] = useState(0);\n\n  // Add new state for tracking API calls\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    // Reset game on component mount (page refresh)\n    const resetAndStartGame = async () => {\n      try {\n        await gameService.resetGame();\n        setGlobalSelectedChoices(new Set());\n        setChoiceResults({});\n        setShowScoreModal(false);\n        setFinalScore(0);\n        setIsProcessing(false);\n        setGameState({\n          currentPlayer: null,\n          choices: [],\n          playersLeft: 42,\n          loading: true,\n          error: null,\n          gameOver: false\n        });\n        // fetchPlayerData();\n      } catch (error) {\n        console.error('Error resetting game:', error);\n        setGameState(prev => ({\n          ...prev,\n          error: 'Failed to reset game',\n          loading: false\n        }));\n      }\n    };\n\n    resetAndStartGame();\n  }, []); // Empty dependency array means this runs once on mount\n\n  useEffect(() => {\n    fetchPlayerData();\n  }, []);\n\n  const fetchPlayerData = async () => {\n    try {\n      const data = await gameService.getPlayer();\n      \n      if (!data.player) {\n        setGameState(prev => ({\n          ...prev,\n          gameOver: true,\n          loading: false\n        }));\n        return;\n      }\n\n      setGameState(prev => ({\n        ...prev,\n        currentPlayer: data.player,\n        choices: data.choices,\n        playersLeft: data.playersLeft,\n        loading: false\n      }));\n    } catch (error) {\n      if (error.response?.status === 404) {\n        setGameState(prev => ({\n          ...prev,\n          gameOver: true,\n          loading: false\n        }));\n      } else {\n        setGameState(prev => ({\n          ...prev,\n          error: 'Failed to load player data',\n          loading: false\n        }));\n      }\n    }\n  };\n\n  const handleGameEnd = async () => {\n    // Calculate score before resetting states\n    const correctAnswers = Object.values(choiceResults).filter(Boolean).length;\n    const totalAnswers = Object.keys(choiceResults).length;\n    \n    setFinalScore(correctAnswers);\n    setShowScoreModal(true);\n\n    try {\n      await gameService.resetGame();\n      // Don't reset states until modal is closed\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error resetting game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to reset game'\n      }));\n    }\n  };\n\n  const handleCloseModal = async () => {\n    // Reset states when modal is closed\n    setShowScoreModal(false);\n    setGlobalSelectedChoices(new Set());\n    setChoiceResults({});\n    setIsProcessing(false);\n    setFinalScore(0);\n    \n    // Fetch first player of new game\n    try {\n      setGameState(prev => ({ ...prev, loading: true }));\n      const data = await gameService.getPlayer();\n      setGameState({\n        currentPlayer: data.player,\n        choices: data.choices,\n        playersLeft: data.playersLeft,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to start new game',\n        loading: false\n      }));\n    }\n  };\n\n  const handleChoice = async (choiceId) => {\n    if (isProcessing || globalSelectedChoices.has(choiceId)) return;\n\n    try {\n      setIsProcessing(true);\n\n      const response = await gameService.validateAnswer(\n        gameState.currentPlayer.id,\n        choiceId\n      );\n\n      // Update global selected choices and results only after successful validation\n      setGlobalSelectedChoices(prev => new Set([...prev, choiceId]));\n      setChoiceResults(prev => ({\n        ...prev,\n        [choiceId]: response.isCorrect\n      }));\n\n      // Check if all options are selected\n      const updatedSelectedOptions = [...globalSelectedChoices, choiceId];\n      if (updatedSelectedOptions.length === gameState.choices.length) {\n        handleGameEnd();\n        return;\n      }\n\n      // Move to next player after a short delay\n      setTimeout(async () => {\n        try {\n          const data = await gameService.getPlayer();\n          \n          if (!data.player) {\n            handleGameEnd();\n          } else {\n            setGameState(prev => ({\n              ...prev,\n              currentPlayer: data.player,\n              choices: data.choices,\n              playersLeft: data.playersLeft,\n              loading: false\n            }));\n          }\n        } catch (error) {\n          console.error('Error fetching next player:', error);\n          setGameState(prev => ({\n            ...prev,\n            error: 'Failed to load next player',\n            loading: false\n          }));\n        } finally {\n          setIsProcessing(false);\n        }\n      }, 1500); // Increased delay to 1.5 seconds\n\n    } catch (error) {\n      console.error('Error validating choice:', error);\n      // Check if it's a rate limit error\n      if (error.response?.status === 429) {\n        // Show some user feedback about rate limiting\n        setGameState(prev => ({\n          ...prev,\n          error: 'Please wait before selecting another option'\n        }));\n        setTimeout(() => {\n          setGameState(prev => ({ ...prev, error: null }));\n        }, 2000);\n      }\n      setIsProcessing(false);\n    }\n  };\n\n  const handleNextPlayer = () => {\n    if (gameState.playersLeft <= 1) {\n      setGameState(prev => ({\n        ...prev,\n        gameOver: true\n      }));\n      return;\n    }\n\n    setGameState(prev => ({\n      ...prev,\n      loading: true\n    }));\n    fetchPlayerData();\n  };\n\n  const handleSkip = () => {\n    handleNextPlayer();\n  };\n\n  const handleRestart = async () => {\n    try {\n      await gameService.resetGame();\n      setGlobalSelectedChoices(new Set());\n      setChoiceResults({});\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: true,\n        error: null,\n        gameOver: false\n      });\n      fetchPlayerData();\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n\n  const calculateFinalScore = () => {\n    // Calculate score based on correct answers\n    return Object.values(choiceResults).filter(Boolean).length;\n  };\n\n  if (gameState.loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  if (gameState.error) {\n    return <div className=\"error\">{gameState.error}</div>;\n  }\n\n  if (gameState.gameOver) {\n    return (\n      <div className=\"game-over\">\n        <h2>Game Over!</h2>\n        <p>You've seen all players!</p>\n        <button onClick={handleRestart} className=\"restart-btn\">\n          Play Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"football-game\">\n      <div className=\"game-header\">\n        <div className=\"player-info\">\n          <div className=\"player-number\"></div>\n          <div className=\"player-name\">{gameState.currentPlayer?.name}</div>\n          {/* <button className=\"wildcard-btn\">\n            Play Wildcard <span className=\"info-icon\">ⓘ</span>\n          </button> */}\n        </div>\n        <div className=\"game-controls\">\n          <button className=\"skip-btn\" onClick={handleSkip}>\n            SKIP ▶\n          </button>\n          <div className=\"players-left\">{gameState.playersLeft} PLAYERS LEFT</div>\n        </div>\n      </div>\n\n      <div className=\"choices-grid\">\n        {gameState.choices.map((choice) => (\n          <div\n            key={choice.id}\n            className={`choice-card ${\n              globalSelectedChoices.has(choice.id)\n                ? choiceResults[choice.id]\n                  ? 'correct selected'\n                  : 'incorrect selected'\n                : ''\n            } ${isProcessing ? 'disabled' : ''}`}\n            onClick={() => handleChoice(choice.id)}\n          >\n            <span className=\"choice-icon\">{choice.icon}</span>\n            <span className=\"choice-label\">{choice.label}</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Add Score Modal */}\n      {showScoreModal && (\n        <div className=\"score-modal-overlay\">\n          <div className=\"score-modal\">\n            <h2>Game Complete!</h2>\n            <div className=\"score-details\">\n              <p>Correct Answers: {finalScore}</p>\n              <p>Total Questions: {Object.keys(choiceResults).length}</p>\n              <p>Accuracy: {((finalScore / Object.keys(choiceResults).length) * 100).toFixed(1)}%</p>\n            </div>\n            <button onClick={handleCloseModal}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FootballGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}