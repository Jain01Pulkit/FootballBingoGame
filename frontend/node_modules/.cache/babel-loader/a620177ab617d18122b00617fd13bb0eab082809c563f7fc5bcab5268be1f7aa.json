{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/footballgame/frontend/src/components/FootballGame/FootballGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { gameService } from '../../services/api';\nimport './FootballGame.css';\nimport CardSelector from '../CardSelector/CardSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FootballGame = () => {\n  _s();\n  var _gameState$currentPla;\n  console.log('FootballGame component rendering');\n  const [gameState, setGameState] = useState({\n    currentPlayer: null,\n    choices: [],\n    playersLeft: 42,\n    loading: true,\n    error: null,\n    gameOver: false\n  });\n\n  // Keep track of all selected choices throughout the game\n  const [globalSelectedChoices, setGlobalSelectedChoices] = useState(new Set());\n  // Keep track of correct/incorrect choices\n  const [choiceResults, setChoiceResults] = useState({});\n\n  // Add new state for modal\n  const [showScoreModal, setShowScoreModal] = useState(false);\n  const [finalScore, setFinalScore] = useState(0);\n\n  // Add new state for tracking API calls\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [availableCards, setAvailableCards] = useState([]);\n  useEffect(() => {\n    console.log('FootballGame useEffect running');\n    const fetchCards = async () => {\n      try {\n        console.log('Fetching cards...');\n        const cards = await gameService.getCards();\n        console.log('Cards received from API:', cards);\n        setAvailableCards(cards || []);\n      } catch (error) {\n        console.error('Error fetching cards:', error);\n        setAvailableCards([]);\n      }\n    };\n    fetchCards();\n  }, []);\n  console.log('Available cards:', availableCards);\n  const handleCardSelect = async cardId => {\n    console.log('Card selected:', cardId);\n    setSelectedCard(cardId);\n    try {\n      // Reset game state\n      await gameService.resetGame();\n      setGlobalSelectedChoices(new Set());\n      setChoiceResults({});\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: true,\n        error: null,\n        gameOver: false\n      });\n\n      // Fetch first player with selected card\n      const data = await gameService.getPlayer(cardId);\n      if (!data.player) {\n        setGameState(prev => ({\n          ...prev,\n          gameOver: true,\n          loading: false\n        }));\n        return;\n      }\n      setGameState({\n        currentPlayer: data.player,\n        choices: data.choices,\n        playersLeft: data.playersLeft,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error starting game with card:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to start game',\n        loading: false\n      }));\n    }\n  };\n  const handleGameEnd = async () => {\n    // Calculate score before resetting states\n    const correctAnswers = Object.values(choiceResults).filter(Boolean).length;\n    const totalAnswers = Object.keys(choiceResults).length;\n    setFinalScore(correctAnswers);\n    setShowScoreModal(true);\n    try {\n      await gameService.resetGame();\n      // Don't reset states until modal is closed\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error resetting game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to reset game'\n      }));\n    }\n  };\n  const handleCloseModal = async () => {\n    setShowScoreModal(false);\n    setGlobalSelectedChoices(new Set());\n    setChoiceResults({});\n    setIsProcessing(false);\n    setFinalScore(0);\n    try {\n      setGameState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      handleGetNextPlayer();\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to start new game',\n        loading: false\n      }));\n    }\n  };\n  const handleChoice = async choiceId => {\n    if (isProcessing || globalSelectedChoices.has(choiceId)) return;\n    try {\n      setIsProcessing(true);\n      const response = await gameService.validateAnswer(gameState.currentPlayer.id, choiceId);\n      setGlobalSelectedChoices(prev => new Set([...prev, choiceId]));\n      setChoiceResults(prev => ({\n        ...prev,\n        [choiceId]: response.isCorrect\n      }));\n      const updatedSelectedOptions = [...globalSelectedChoices, choiceId];\n      if (updatedSelectedOptions.length === gameState.choices.length) {\n        handleGameEnd();\n        return;\n      }\n      setTimeout(async () => {\n        try {\n          handleGetNextPlayer();\n        } catch (error) {\n          console.error('Error fetching next player:', error);\n          setGameState(prev => ({\n            ...prev,\n            error: 'Failed to load next player',\n            loading: false\n          }));\n        } finally {\n          setIsProcessing(false);\n        }\n      }, 1500);\n    } catch (error) {\n      var _error$response;\n      console.error('Error validating choice:', error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429) {\n        setGameState(prev => ({\n          ...prev,\n          error: 'Please wait before selecting another option'\n        }));\n        setTimeout(() => {\n          setGameState(prev => ({\n            ...prev,\n            error: null\n          }));\n        }, 2000);\n      }\n      setIsProcessing(false);\n    }\n  };\n  const handleNextPlayer = () => {\n    if (gameState.playersLeft <= 1) {\n      setGameState(prev => ({\n        ...prev,\n        gameOver: true\n      }));\n      return;\n    }\n    setGameState(prev => ({\n      ...prev,\n      loading: true\n    }));\n    handleGetNextPlayer();\n  };\n  const handleSkip = () => {\n    handleNextPlayer();\n  };\n  const handleRestart = async cardId => {\n    try {\n      await gameService.resetGame();\n      setGlobalSelectedChoices(new Set());\n      setChoiceResults({});\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: true,\n        error: null,\n        gameOver: false\n      });\n      setSelectedCard(cardId);\n      handleGetNextPlayer();\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n  const handleGetNextPlayer = async () => {\n    try {\n      const data = await gameService.getPlayer(selectedCard);\n      if (!data.player) {\n        handleGameEnd();\n      } else {\n        setGameState(prev => ({\n          ...prev,\n          currentPlayer: data.player,\n          choices: data.choices,\n          playersLeft: data.playersLeft,\n          loading: false\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching next player:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to load next player',\n        loading: false\n      }));\n    }\n  };\n  const calculateFinalScore = () => {\n    // Calculate score based on correct answers\n    return Object.values(choiceResults).filter(Boolean).length;\n  };\n  if (gameState.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameState.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: gameState.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameState.gameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You've seen all players!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRestart(selectedCard),\n        className: \"restart-btn\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this);\n  }\n  if (!(availableCards !== null && availableCards !== void 0 && availableCards.length)) {\n    console.log('About to render CardSelector with:', {\n      availableCards,\n      cardsLength: availableCards === null || availableCards === void 0 ? void 0 : availableCards.length,\n      isArray: Array.isArray(availableCards)\n    });\n    return /*#__PURE__*/_jsxDEV(CardSelector, {\n      cards: availableCards,\n      onSelectCard: handleCardSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"football-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-name\",\n          children: (_gameState$currentPla = gameState.currentPlayer) === null || _gameState$currentPla === void 0 ? void 0 : _gameState$currentPla.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"skip-btn\",\n          onClick: handleSkip,\n          children: \"SKIP \\u25B6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-left\",\n          children: [gameState.playersLeft, \" PLAYERS LEFT\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choices-grid\",\n      children: gameState.choices.map(choice => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `choice-card ${globalSelectedChoices.has(choice.id) ? choiceResults[choice.id] ? 'correct selected' : 'incorrect selected' : ''} ${isProcessing ? 'disabled' : ''}`,\n        onClick: () => handleChoice(choice.id),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"choice-icon\",\n          children: choice.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"choice-label\",\n          children: choice.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)]\n      }, choice.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), showScoreModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game Complete!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Correct Answers: \", finalScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Questions: \", Object.keys(choiceResults).length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Accuracy: \", (finalScore / Object.keys(choiceResults).length * 100).toFixed(1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(FootballGame, \"4e/nUydcfLxGoWHlIs/bWJ/UeIc=\");\n_c = FootballGame;\nexport default FootballGame;\nvar _c;\n$RefreshReg$(_c, \"FootballGame\");","map":{"version":3,"names":["React","useState","useEffect","gameService","CardSelector","jsxDEV","_jsxDEV","FootballGame","_s","_gameState$currentPla","console","log","gameState","setGameState","currentPlayer","choices","playersLeft","loading","error","gameOver","globalSelectedChoices","setGlobalSelectedChoices","Set","choiceResults","setChoiceResults","showScoreModal","setShowScoreModal","finalScore","setFinalScore","isProcessing","setIsProcessing","selectedCard","setSelectedCard","availableCards","setAvailableCards","fetchCards","cards","getCards","handleCardSelect","cardId","resetGame","data","getPlayer","player","prev","handleGameEnd","correctAnswers","Object","values","filter","Boolean","length","totalAnswers","keys","handleCloseModal","handleGetNextPlayer","handleChoice","choiceId","has","response","validateAnswer","id","isCorrect","updatedSelectedOptions","setTimeout","_error$response","status","handleNextPlayer","handleSkip","handleRestart","calculateFinalScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cardsLength","isArray","Array","onSelectCard","name","map","choice","icon","label","toFixed","_c","$RefreshReg$"],"sources":["/home/user/Desktop/footballgame/frontend/src/components/FootballGame/FootballGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { gameService } from '../../services/api';\nimport './FootballGame.css';\nimport CardSelector from '../CardSelector/CardSelector';\n\nconst FootballGame = () => {\n  console.log('FootballGame component rendering');\n\n  const [gameState, setGameState] = useState({\n    currentPlayer: null,\n    choices: [],\n    playersLeft: 42,\n    loading: true,\n    error: null,\n    gameOver: false\n  });\n\n  // Keep track of all selected choices throughout the game\n  const [globalSelectedChoices, setGlobalSelectedChoices] = useState(new Set());\n  // Keep track of correct/incorrect choices\n  const [choiceResults, setChoiceResults] = useState({});\n\n  // Add new state for modal\n  const [showScoreModal, setShowScoreModal] = useState(false);\n  const [finalScore, setFinalScore] = useState(0);\n\n  // Add new state for tracking API calls\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [availableCards, setAvailableCards] = useState([]);\n\n  useEffect(() => {\n    console.log('FootballGame useEffect running');\n    const fetchCards = async () => {\n      try {\n        console.log('Fetching cards...');\n        const cards = await gameService.getCards();\n        console.log('Cards received from API:', cards);\n        setAvailableCards(cards || []);\n      } catch (error) {\n        console.error('Error fetching cards:', error);\n        setAvailableCards([]);\n      }\n    };\n    \n    fetchCards();\n  }, []);\n  console.log('Available cards:', availableCards);\n  const handleCardSelect = async (cardId) => {\n    console.log('Card selected:', cardId);\n    setSelectedCard(cardId);\n    \n    try {\n      // Reset game state\n      await gameService.resetGame();\n      setGlobalSelectedChoices(new Set());\n      setChoiceResults({});\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: true,\n        error: null,\n        gameOver: false\n      });\n\n      // Fetch first player with selected card\n      const data = await gameService.getPlayer(cardId);\n      \n      if (!data.player) {\n        setGameState(prev => ({\n          ...prev,\n          gameOver: true,\n          loading: false\n        }));\n        return;\n      }\n\n      setGameState({\n        currentPlayer: data.player,\n        choices: data.choices,\n        playersLeft: data.playersLeft,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error starting game with card:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to start game',\n        loading: false\n      }));\n    }\n  };\n\n  const handleGameEnd = async () => {\n    // Calculate score before resetting states\n    const correctAnswers = Object.values(choiceResults).filter(Boolean).length;\n    const totalAnswers = Object.keys(choiceResults).length;\n    \n    setFinalScore(correctAnswers);\n    setShowScoreModal(true);\n\n    try {\n      await gameService.resetGame();\n      // Don't reset states until modal is closed\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: false,\n        error: null,\n        gameOver: false\n      });\n    } catch (error) {\n      console.error('Error resetting game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to reset game'\n      }));\n    }\n  };\n\n  const handleCloseModal = async () => {\n    setShowScoreModal(false);\n    setGlobalSelectedChoices(new Set());\n    setChoiceResults({});\n    setIsProcessing(false);\n    setFinalScore(0);\n    \n    try {\n      setGameState(prev => ({ ...prev, loading: true }));\n      handleGetNextPlayer();\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to start new game',\n        loading: false\n      }));\n    }\n  };\n\n  const handleChoice = async (choiceId) => {\n    if (isProcessing || globalSelectedChoices.has(choiceId)) return;\n\n    try {\n      setIsProcessing(true);\n\n      const response = await gameService.validateAnswer(\n        gameState.currentPlayer.id,\n        choiceId\n      );\n\n      setGlobalSelectedChoices(prev => new Set([...prev, choiceId]));\n      setChoiceResults(prev => ({\n        ...prev,\n        [choiceId]: response.isCorrect\n      }));\n\n      const updatedSelectedOptions = [...globalSelectedChoices, choiceId];\n      if (updatedSelectedOptions.length === gameState.choices.length) {\n        handleGameEnd();\n        return;\n      }\n\n      setTimeout(async () => {\n        try {\n          handleGetNextPlayer();\n        } catch (error) {\n          console.error('Error fetching next player:', error);\n          setGameState(prev => ({\n            ...prev,\n            error: 'Failed to load next player',\n            loading: false\n          }));\n        } finally {\n          setIsProcessing(false);\n        }\n      }, 1500);\n\n    } catch (error) {\n      console.error('Error validating choice:', error);\n      if (error.response?.status === 429) {\n        setGameState(prev => ({\n          ...prev,\n          error: 'Please wait before selecting another option'\n        }));\n        setTimeout(() => {\n          setGameState(prev => ({ ...prev, error: null }));\n        }, 2000);\n      }\n      setIsProcessing(false);\n    }\n  };\n\n  const handleNextPlayer = () => {\n    if (gameState.playersLeft <= 1) {\n      setGameState(prev => ({\n        ...prev,\n        gameOver: true\n      }));\n      return;\n    }\n\n    setGameState(prev => ({\n      ...prev,\n      loading: true\n    }));\n    handleGetNextPlayer();\n  };\n\n  const handleSkip = () => {\n    handleNextPlayer();\n  };\n\n  const handleRestart = async (cardId) => {\n    try {\n      await gameService.resetGame();\n      setGlobalSelectedChoices(new Set());\n      setChoiceResults({});\n      setGameState({\n        currentPlayer: null,\n        choices: [],\n        playersLeft: 42,\n        loading: true,\n        error: null,\n        gameOver: false\n      });\n      setSelectedCard(cardId);\n      handleGetNextPlayer();\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n\n  const handleGetNextPlayer = async () => {\n    try {\n      const data = await gameService.getPlayer(selectedCard);\n      if (!data.player) {\n        handleGameEnd();\n      } else {\n        setGameState(prev => ({\n          ...prev,\n          currentPlayer: data.player,\n          choices: data.choices,\n          playersLeft: data.playersLeft,\n          loading: false\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching next player:', error);\n      setGameState(prev => ({\n        ...prev,\n        error: 'Failed to load next player',\n        loading: false\n      }));\n    }\n  };\n\n  const calculateFinalScore = () => {\n    // Calculate score based on correct answers\n    return Object.values(choiceResults).filter(Boolean).length;\n  };\n  \n  if (gameState.loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  if (gameState.error) {\n    return <div className=\"error\">{gameState.error}</div>;\n  }\n\n  if (gameState.gameOver) {\n    return (\n      <div className=\"game-over\">\n        <h2>Game Over!</h2>\n        <p>You've seen all players!</p>\n        <button onClick={() => handleRestart(selectedCard)} className=\"restart-btn\">\n          Play Again\n        </button>\n      </div>\n    );\n  }\n\n  if (!availableCards?.length) {\n    console.log('About to render CardSelector with:', {\n      availableCards,\n      cardsLength: availableCards?.length,\n      isArray: Array.isArray(availableCards)\n    });\n    return (\n      <CardSelector \n        cards={availableCards} \n        onSelectCard={handleCardSelect} \n      />\n    );\n  }\n\n  return (\n    <div className=\"football-game\">\n      <div className=\"game-header\">\n        <div className=\"player-info\">\n          {/* <div className=\"player-number\"></div> */}\n          <div className=\"player-name\">{gameState.currentPlayer?.name}</div>\n          {/* <button className=\"wildcard-btn\">\n            Play Wildcard <span className=\"info-icon\">ⓘ</span>\n          </button> */}\n        </div>\n        <div className=\"game-controls\">\n          <button className=\"skip-btn\" onClick={handleSkip}>\n            SKIP ▶\n          </button>\n          <div className=\"players-left\">{gameState.playersLeft} PLAYERS LEFT</div>\n        </div>\n      </div>\n\n      <div className=\"choices-grid\">\n        {gameState.choices.map((choice) => (\n          <div\n            key={choice.id}\n            className={`choice-card ${\n              globalSelectedChoices.has(choice.id)\n                ? choiceResults[choice.id]\n                  ? 'correct selected'\n                  : 'incorrect selected'\n                : ''\n            } ${isProcessing ? 'disabled' : ''}`}\n            onClick={() => handleChoice(choice.id)}\n          >\n            <span className=\"choice-icon\">{choice.icon}</span>\n            <span className=\"choice-label\">{choice.label}</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Add Score Modal */}\n      {showScoreModal && (\n        <div className=\"score-modal-overlay\">\n          <div className=\"score-modal\">\n            <h2>Game Complete!</h2>\n            <div className=\"score-details\">\n              <p>Correct Answers: {finalScore}</p>\n              <p>Total Questions: {Object.keys(choiceResults).length}</p>\n              <p>Accuracy: {((finalScore / Object.keys(choiceResults).length) * 100).toFixed(1)}%</p>\n            </div>\n            <button onClick={handleCloseModal}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FootballGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAO,oBAAoB;AAC3B,OAAOC,YAAY,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EACzBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAE/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC;IACzCa,aAAa,EAAE,IAAI;IACnBC,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGpB,QAAQ,CAAC,IAAIqB,GAAG,CAAC,CAAC,CAAC;EAC7E;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAM,CAAC8B,YAAY,EAAEC,eAAe,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgC,cAAc,EAAEC,iBAAiB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7C,MAAMwB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACFzB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,MAAMyB,KAAK,GAAG,MAAMjC,WAAW,CAACkC,QAAQ,CAAC,CAAC;QAC1C3B,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEyB,KAAK,CAAC;QAC9CF,iBAAiB,CAACE,KAAK,IAAI,EAAE,CAAC;MAChC,CAAC,CAAC,OAAOlB,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CgB,iBAAiB,CAAC,EAAE,CAAC;MACvB;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EACNzB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEsB,cAAc,CAAC;EAC/C,MAAMK,gBAAgB,GAAG,MAAOC,MAAM,IAAK;IACzC7B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE4B,MAAM,CAAC;IACrCP,eAAe,CAACO,MAAM,CAAC;IAEvB,IAAI;MACF;MACA,MAAMpC,WAAW,CAACqC,SAAS,CAAC,CAAC;MAC7BnB,wBAAwB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;MACnCE,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACpBX,YAAY,CAAC;QACXC,aAAa,EAAE,IAAI;QACnBC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMsB,IAAI,GAAG,MAAMtC,WAAW,CAACuC,SAAS,CAACH,MAAM,CAAC;MAEhD,IAAI,CAACE,IAAI,CAACE,MAAM,EAAE;QAChB9B,YAAY,CAAC+B,IAAI,KAAK;UACpB,GAAGA,IAAI;UACPzB,QAAQ,EAAE,IAAI;UACdF,OAAO,EAAE;QACX,CAAC,CAAC,CAAC;QACH;MACF;MAEAJ,YAAY,CAAC;QACXC,aAAa,EAAE2B,IAAI,CAACE,MAAM;QAC1B5B,OAAO,EAAE0B,IAAI,CAAC1B,OAAO;QACrBC,WAAW,EAAEyB,IAAI,CAACzB,WAAW;QAC7BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDL,YAAY,CAAC+B,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP1B,KAAK,EAAE,sBAAsB;QAC7BD,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAM4B,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC;IACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,MAAM,CAACzB,aAAa,CAAC,CAAC0B,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM;IAC1E,MAAMC,YAAY,GAAGL,MAAM,CAACM,IAAI,CAAC9B,aAAa,CAAC,CAAC4B,MAAM;IAEtDvB,aAAa,CAACkB,cAAc,CAAC;IAC7BpB,iBAAiB,CAAC,IAAI,CAAC;IAEvB,IAAI;MACF,MAAMvB,WAAW,CAACqC,SAAS,CAAC,CAAC;MAC7B;MACA3B,YAAY,CAAC;QACXC,aAAa,EAAE,IAAI;QACnBC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CL,YAAY,CAAC+B,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP1B,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMoC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC5B,iBAAiB,CAAC,KAAK,CAAC;IACxBL,wBAAwB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IACnCE,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACpBM,eAAe,CAAC,KAAK,CAAC;IACtBF,aAAa,CAAC,CAAC,CAAC;IAEhB,IAAI;MACFf,YAAY,CAAC+B,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE3B,OAAO,EAAE;MAAK,CAAC,CAAC,CAAC;MAClDsC,mBAAmB,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDL,YAAY,CAAC+B,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP1B,KAAK,EAAE,0BAA0B;QACjCD,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMuC,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACvC,IAAI5B,YAAY,IAAIT,qBAAqB,CAACsC,GAAG,CAACD,QAAQ,CAAC,EAAE;IAEzD,IAAI;MACF3B,eAAe,CAAC,IAAI,CAAC;MAErB,MAAM6B,QAAQ,GAAG,MAAMxD,WAAW,CAACyD,cAAc,CAC/ChD,SAAS,CAACE,aAAa,CAAC+C,EAAE,EAC1BJ,QACF,CAAC;MAEDpC,wBAAwB,CAACuB,IAAI,IAAI,IAAItB,GAAG,CAAC,CAAC,GAAGsB,IAAI,EAAEa,QAAQ,CAAC,CAAC,CAAC;MAC9DjC,gBAAgB,CAACoB,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP,CAACa,QAAQ,GAAGE,QAAQ,CAACG;MACvB,CAAC,CAAC,CAAC;MAEH,MAAMC,sBAAsB,GAAG,CAAC,GAAG3C,qBAAqB,EAAEqC,QAAQ,CAAC;MACnE,IAAIM,sBAAsB,CAACZ,MAAM,KAAKvC,SAAS,CAACG,OAAO,CAACoC,MAAM,EAAE;QAC9DN,aAAa,CAAC,CAAC;QACf;MACF;MAEAmB,UAAU,CAAC,YAAY;QACrB,IAAI;UACFT,mBAAmB,CAAC,CAAC;QACvB,CAAC,CAAC,OAAOrC,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnDL,YAAY,CAAC+B,IAAI,KAAK;YACpB,GAAGA,IAAI;YACP1B,KAAK,EAAE,4BAA4B;YACnCD,OAAO,EAAE;UACX,CAAC,CAAC,CAAC;QACL,CAAC,SAAS;UACRa,eAAe,CAAC,KAAK,CAAC;QACxB;MACF,CAAC,EAAE,IAAI,CAAC;IAEV,CAAC,CAAC,OAAOZ,KAAK,EAAE;MAAA,IAAA+C,eAAA;MACdvD,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,IAAI,EAAA+C,eAAA,GAAA/C,KAAK,CAACyC,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;QAClCrD,YAAY,CAAC+B,IAAI,KAAK;UACpB,GAAGA,IAAI;UACP1B,KAAK,EAAE;QACT,CAAC,CAAC,CAAC;QACH8C,UAAU,CAAC,MAAM;UACfnD,YAAY,CAAC+B,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE1B,KAAK,EAAE;UAAK,CAAC,CAAC,CAAC;QAClD,CAAC,EAAE,IAAI,CAAC;MACV;MACAY,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAMqC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIvD,SAAS,CAACI,WAAW,IAAI,CAAC,EAAE;MAC9BH,YAAY,CAAC+B,IAAI,KAAK;QACpB,GAAGA,IAAI;QACPzB,QAAQ,EAAE;MACZ,CAAC,CAAC,CAAC;MACH;IACF;IAEAN,YAAY,CAAC+B,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP3B,OAAO,EAAE;IACX,CAAC,CAAC,CAAC;IACHsC,mBAAmB,CAAC,CAAC;EACvB,CAAC;EAED,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvBD,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAED,MAAME,aAAa,GAAG,MAAO9B,MAAM,IAAK;IACtC,IAAI;MACF,MAAMpC,WAAW,CAACqC,SAAS,CAAC,CAAC;MAC7BnB,wBAAwB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;MACnCE,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACpBX,YAAY,CAAC;QACXC,aAAa,EAAE,IAAI;QACnBC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFa,eAAe,CAACO,MAAM,CAAC;MACvBgB,mBAAmB,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAMqC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMd,IAAI,GAAG,MAAMtC,WAAW,CAACuC,SAAS,CAACX,YAAY,CAAC;MACtD,IAAI,CAACU,IAAI,CAACE,MAAM,EAAE;QAChBE,aAAa,CAAC,CAAC;MACjB,CAAC,MAAM;QACLhC,YAAY,CAAC+B,IAAI,KAAK;UACpB,GAAGA,IAAI;UACP9B,aAAa,EAAE2B,IAAI,CAACE,MAAM;UAC1B5B,OAAO,EAAE0B,IAAI,CAAC1B,OAAO;UACrBC,WAAW,EAAEyB,IAAI,CAACzB,WAAW;UAC7BC,OAAO,EAAE;QACX,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDL,YAAY,CAAC+B,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP1B,KAAK,EAAE,4BAA4B;QACnCD,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMqD,mBAAmB,GAAGA,CAAA,KAAM;IAChC;IACA,OAAOvB,MAAM,CAACC,MAAM,CAACzB,aAAa,CAAC,CAAC0B,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM;EAC5D,CAAC;EAED,IAAIvC,SAAS,CAACK,OAAO,EAAE;IACrB,oBAAOX,OAAA;MAAKiE,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClD;EAEA,IAAIhE,SAAS,CAACM,KAAK,EAAE;IACnB,oBAAOZ,OAAA;MAAKiE,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAE5D,SAAS,CAACM;IAAK;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACvD;EAEA,IAAIhE,SAAS,CAACO,QAAQ,EAAE;IACtB,oBACEb,OAAA;MAAKiE,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBlE,OAAA;QAAAkE,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBtE,OAAA;QAAAkE,QAAA,EAAG;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC/BtE,OAAA;QAAQuE,OAAO,EAAEA,CAAA,KAAMR,aAAa,CAACtC,YAAY,CAAE;QAACwC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAE5E;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;EAEA,IAAI,EAAC3C,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEkB,MAAM,GAAE;IAC3BzC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE;MAChDsB,cAAc;MACd6C,WAAW,EAAE7C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEkB,MAAM;MACnC4B,OAAO,EAAEC,KAAK,CAACD,OAAO,CAAC9C,cAAc;IACvC,CAAC,CAAC;IACF,oBACE3B,OAAA,CAACF,YAAY;MACXgC,KAAK,EAAEH,cAAe;MACtBgD,YAAY,EAAE3C;IAAiB;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAEN;EAEA,oBACEtE,OAAA;IAAKiE,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BlE,OAAA;MAAKiE,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BlE,OAAA;QAAKiE,SAAS,EAAC,aAAa;QAAAC,QAAA,eAE1BlE,OAAA;UAAKiE,SAAS,EAAC,aAAa;UAAAC,QAAA,GAAA/D,qBAAA,GAAEG,SAAS,CAACE,aAAa,cAAAL,qBAAA,uBAAvBA,qBAAA,CAAyByE;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAI/D,CAAC,eACNtE,OAAA;QAAKiE,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BlE,OAAA;UAAQiE,SAAS,EAAC,UAAU;UAACM,OAAO,EAAET,UAAW;UAAAI,QAAA,EAAC;QAElD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTtE,OAAA;UAAKiE,SAAS,EAAC,cAAc;UAAAC,QAAA,GAAE5D,SAAS,CAACI,WAAW,EAAC,eAAa;QAAA;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENtE,OAAA;MAAKiE,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1B5D,SAAS,CAACG,OAAO,CAACoE,GAAG,CAAEC,MAAM,iBAC5B9E,OAAA;QAEEiE,SAAS,EAAE,eACTnD,qBAAqB,CAACsC,GAAG,CAAC0B,MAAM,CAACvB,EAAE,CAAC,GAChCtC,aAAa,CAAC6D,MAAM,CAACvB,EAAE,CAAC,GACtB,kBAAkB,GAClB,oBAAoB,GACtB,EAAE,IACJhC,YAAY,GAAG,UAAU,GAAG,EAAE,EAAG;QACrCgD,OAAO,EAAEA,CAAA,KAAMrB,YAAY,CAAC4B,MAAM,CAACvB,EAAE,CAAE;QAAAW,QAAA,gBAEvClE,OAAA;UAAMiE,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAEY,MAAM,CAACC;QAAI;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClDtE,OAAA;UAAMiE,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAEY,MAAM,CAACE;QAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAX/CQ,MAAM,CAACvB,EAAE;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGLnD,cAAc,iBACbnB,OAAA;MAAKiE,SAAS,EAAC,qBAAqB;MAAAC,QAAA,eAClClE,OAAA;QAAKiE,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BlE,OAAA;UAAAkE,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBtE,OAAA;UAAKiE,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BlE,OAAA;YAAAkE,QAAA,GAAG,mBAAiB,EAAC7C,UAAU;UAAA;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpCtE,OAAA;YAAAkE,QAAA,GAAG,mBAAiB,EAACzB,MAAM,CAACM,IAAI,CAAC9B,aAAa,CAAC,CAAC4B,MAAM;UAAA;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3DtE,OAAA;YAAAkE,QAAA,GAAG,YAAU,EAAC,CAAE7C,UAAU,GAAGoB,MAAM,CAACM,IAAI,CAAC9B,aAAa,CAAC,CAAC4B,MAAM,GAAI,GAAG,EAAEoC,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;UAAA;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpF,CAAC,eACNtE,OAAA;UAAQuE,OAAO,EAAEvB,gBAAiB;UAAAkB,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpE,EAAA,CA7VID,YAAY;AAAAiF,EAAA,GAAZjF,YAAY;AA+VlB,eAAeA,YAAY;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}